"""
Django settings for ready_aim_learn project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=)-n630c2jipxybj_%0&ldr=wlprrvh4wmfw&$b-nd7o)75g69'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'lessons',
    'paypal.standard.ipn',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'ready_aim_learn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ready_aim_learn.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# settings.py

# settings.py
DEBUG = True  # Must be True during development

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Add for JavaScript MIME type fix
import mimetypes
mimetypes.add_type("text/javascript", ".js", True)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'


# settings.py

# ==============================================
# Email Settings - Production Environment
# ==============================================
# Uncomment and configure these for production
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.mailgun.org'  # Mailgun SMTP server
# EMAIL_PORT = 587  # Standard port with TLS
# EMAIL_USE_TLS = True  # Use TLS for security
# EMAIL_HOST_USER = 'postmaster@yourdomain.com'  # Mailgun username
# EMAIL_HOST_PASSWORD = 'your-real-mailgun-password'  # Mailgun SMTP password
# DEFAULT_FROM_EMAIL = 'noreply@yourdomain.com'  # Sender email
# ADMIN_EMAIL = 'luisdavid313@gmail.com'  # Admin email

# ==============================================
# Email Settings - Development Environment
# ==============================================
# Development configurations (choose one):

# Option 1: Show emails in console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Option 2: Save emails to files (uncomment to use)
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
# EMAIL_FILE_PATH = BASE_DIR / 'tmp/emails'  # Path to store emails

# ==============================================
# Email Testing in Django Shell
# ==============================================
# To test email sending, run in Django shell:
# python manage.py shell
# Then run:
"""
from django.core.mail import send_mail
send_mail(
    'Test Subject',
    'This is a test message',
    'noreply@yourdomain.com',
    ['luisdavid313@gmail.com'],
    fail_silently=False,
)
"""

# ==============================================
# Secure Email Configuration
# ==============================================
# For additional security, consider:
# 1. Using environment variables for sensitive data
# 2. Implementing email rate limiting
# 3. Setting up SPF, DKIM, and DMARC records

# Example using environment variables:
# import os
# EMAIL_HOST_PASSWORD = os.getenv('MAILGUN_SMTP_PASSWORD')

# PayPal Settings
PAYPAL_RECEIVER_EMAIL = 'your-business-email@example.com'  # ایمیل حساب پی‌پال تجاری
PAYPAL_TEST = True  # حالت تست (برای محیط توسعه)


SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'


import os
from dotenv import load_dotenv

load_dotenv()

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        }
    }
}
